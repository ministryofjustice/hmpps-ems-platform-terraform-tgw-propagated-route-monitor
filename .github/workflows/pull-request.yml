name: Pull Request

on:
  pull_request:
    branches:
      - main

jobs:
  tflint:
    name: Lint terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache tflint plugin directory
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
      - name: Initialise tflint
        run: tflint --init
      - name: Run TFLint
        run: tflint

  python-lint:
    name: Lint python
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./function
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --with dev
      - name: Check code formatting
        run: poetry run black --check .
      - name: Check dependency formatting
        run: poetry run isort --check-only .
      - name: Check dependency formatting
        run: poetry run mypy --check-untyped-defs --disable-error-code=import-untyped .

  python-test:
    name: Test python
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./function
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --with dev
      - name: Install plugin
        run: poetry add pytest-github-actions-annotate-failures
      - name: Pytest
        run: poetry run pytest

  # Ensure the lambda function is successfully built using the terraform module
  package-build:
    name: Build lambda package
    runs-on: ubuntu-latest
    env:
      TF_VAR_create: false
      TF_VAR_sns_topic_arn: "arn:aws:sns:eu-west-2:123456789123:my-topic"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
      - name: Install test dependencies
        run: |
          pip install moto[all,server]
      - name: Start moto proxy 
        run: |
          moto_proxy -H 0.0.0.0 -p 5005 -v > moto_proxy.log &
      - name: Setup provider
        run: |
          echo "provider \"aws\" {\nregion = \"eu-west-2\"\naccess_key = \"test\"\nsecret_key = \"test\"\nskip_credentials_validation = true\nskip_metadata_api_check = true\nskip_requesting_account_id  = true\ns3_use_path_style = true\nhttp_proxy = \"http://localhost:5000\"\nhttps_proxy = \"http://localhost:5000\"\nendpoints {\nsts = \"http://localhost:5000\"\n}\n}" > terraform.tf
      - name: Initalise terraform
        run: |
          terraform init
      - name: Build package
        run: |
          terraform apply -auto-approve
      - name: Stop proxy
        run: |
          kill $(lsof -t -i:5005)
